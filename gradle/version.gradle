import org.eclipse.jgit.api.Git
import org.eclipse.jgit.lib.Constants
import org.eclipse.jgit.lib.ObjectId
import org.eclipse.jgit.lib.PersonIdent
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.revwalk.RevCommit
import org.eclipse.jgit.storage.file.FileRepositoryBuilder

import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.12.+'
    }
}

class VersionExtension {
    static DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME

    Project project
    private boolean parsedVersion = false
    private String timestamp = '1970-01-01T00:00:00+00:00'
    private String commitId = '0000000000000000000000000000000000000000'
    private String abbrevId = '000000'
    private String rawVersion = '0.0.0'
    private boolean snapshot = true
    private String classifiers = '-UNKNOWN'

    VersionExtension(Project project) {
        this.project = project
    }

    void calculateVersion() {
        if (!parsedVersion) {
            parsedVersion = true
            try (Repository repository = new FileRepositoryBuilder()
                    .readEnvironment()
                    .findGitDir(project.projectDir)
                    .setMustExist(true).build()) {

                // Find HEAD commit and extract ID and timestamp
                try (var reader = repository.newObjectReader()) {
                    final ObjectId headCommitId = repository.resolve(Constants.HEAD)
                    final RevCommit headCommit = repository.parseCommit(headCommitId) // TODO throws

                    final PersonIdent identity = headCommit.committerIdent
                    final OffsetDateTime date = OffsetDateTime.ofInstant(identity.when.toInstant(),
                            identity.timeZone.toZoneId())

                    timestamp = formatter.format(date)
                    commitId = headCommit.name
                    abbrevId = reader.abbreviate(headCommitId)
                }

                final Git git = Git.wrap(repository)

                final String describe = git.describe().setTags(true).setLong(true).call()

                classifiers = commitId ? "+${abbrevId ?: commitId}" : ''
                if (describe != null) {
                    def descVer, descCount

                    def lastSep = describe.lastIndexOf('-')
                    def allExceptLast = describe.substring(0, lastSep)
                    def secondToLastSep = allExceptLast.lastIndexOf('-')
                    descVer = allExceptLast.substring(0, secondToLastSep)
                    descCount = allExceptLast.substring(secondToLastSep + 1)

                    rawVersion = descVer.startsWith('v') ? descVer.substring(1) : descVer
                    int commitCount = Integer.parseInt(descCount)
                    boolean dirty = !git.status().call().clean
                    if (commitCount == 0) {
                        snapshot = dirty
                        classifiers = ''
                    } else if (dirty) {
                        classifiers = '.dirty'
                    }
                }

                if (snapshot) {
                    classifiers = '-SNAPSHOT' + classifiers
                }
            } catch (Exception e) {
                project.logger.warn("Exception while getting version info from Git: {}", e.toString())
            }
        }
    }

    String getVersion() {
        calculateVersion()
        return this.rawVersion + this.classifiers
    }

    String getRawVersion() {
        calculateVersion()
        return this.rawVersion
    }

    String getSimpleVersion() {
        calculateVersion()
        return this.rawVersion + (this.snapshot ? '-SNAPSHOT' : '')
    }

    String getCommitTimestamp() {
        calculateVersion()
        return this.timestamp
    }

    String getAbbreviatedCommitId() {
        calculateVersion()
        return this.abbrevId
    }

    String getCommitId() {
        calculateVersion()
        return this.commitId
    }

    String getClassifiers() {
        calculateVersion()
        return this.classifiers
    }

    boolean isSnapshot() {
        calculateVersion()
        return this.snapshot
    }
}

project.extensions.create("versions", VersionExtension, project)